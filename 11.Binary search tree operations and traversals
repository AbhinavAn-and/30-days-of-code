#include<stdio.h>
#include<conio.h>
#include<alloc.h>
#include<process.h>

struct node
{
 int data;
 struct node *left;
 struct node *right;
 };
 struct node *newnode(int item)
{
 struct node *temp=(struct node*)malloc(sizeof(struct node));

 temp->data=item;
 temp->left=temp->right=NULL;
 return temp;
}
 struct node *insert(struct node *node,int key)
 {
   if(node==NULL)
      return newnode(key);
   if(key<node->data)
      node->left=insert(node->left,key);
   if(key>node->data)
      node->right=insert(node->right,key);
   return node;
 }

 int search(struct node *root,int key)
 {
  if(root==NULL)
  return -1;
  if(root->data==key)
   return 1;
  if(root->data<key)
  return search(root->right,key);
  return search(root->left,key);
}

void inorder(struct node *root)
{
  if(root!=NULL)
  {
    inorder(root->left);
    printf("%d\t",root->data);
    inorder(root->right);
  }
}

void preorder(struct node *root)
{
  if(root!=NULL)
  {
    printf("%d\t",root->data);
     preorder(root->left);
     preorder(root->right);
  }
}

void postorder(struct node *root)
{
  if(root!=NULL)
  {
    postorder(root->left);
    postorder(root->right);
    printf("%d\t",root->data);

  }
}

void main()
{
 int n,i,ch,ch1,key,pos;
 struct node *root=NULL;
 clrscr();
 while(1)
 {
  printf("enter your choice \n1.CREATE \n2.traversal\n3.search\n4.exit\n");
  scanf("%d",&ch);

  switch(ch)
  {
    case 1:printf("ENTER the no of nodes in bt\n");
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
     printf("Enter the element to be inserted");
     scanf("%d",&key);
     root=insert(root,key);
    }
    break;

 case 2:printf("Enter your choice\n1.preorder\n2.inorder\n3.postorder");
      scanf("%d",&ch1);
      if(ch1==1)

      preorder(root);
       else if(ch1==2)
	inorder(root);
       else
       postorder(root);
     break;

case 3:printf("Enter the key to be searched ");
       scanf("%d",&key);

       pos=search(root,key);
       if(pos==-1)
       printf("\nkey is not found ");
       else
	printf("\nkey is found");
       break;

case 4:exit(0);
}
}
getch();
}
